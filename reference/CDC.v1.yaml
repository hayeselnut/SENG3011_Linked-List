openapi: 3.0.0
info:
  title: Get Reports
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /articles:
    parameters: []
    get:
      summary: Report
      operationId: get-reports-poi-key_terms-location
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  url:
                    type: string
                    minLength: 1
                  date_of_publication:
                    type: string
                    minLength: 1
                  headline:
                    type: string
                    minLength: 1
                  main_text:
                    type: string
                    minLength: 1
                  reports:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      type: object
                      properties:
                        event_date:
                          type: string
                          minLength: 1
                        locations:
                          type: array
                          uniqueItems: true
                          minItems: 1
                          items:
                            type: object
                            properties:
                              country:
                                type: string
                                minLength: 1
                              location:
                                type: string
                                minLength: 1
                            required:
                              - country
                              - location
                        diseases:
                          type: array
                          items:
                            type: object
                        syndromes:
                          type: array
                          items:
                            type: object
                      required:
                        - event_date
                required:
                  - url
                  - date_of_publication
                  - headline
                  - main_text
                  - reports
              examples:
                example_from_overview:
                  value:
                    url: 'https://www.who.int/csr/don/17-january-2020-novel-coronavirus-japan-ex-chila/en/'
                    date_of_publication: '2020-01-17 00:00:00'
                    headline: Novel Coronavirus - Japan (ex-China)
                    main_text: 'On 15 January 2020, the Ministry of Health, Labour and Welfare, Japan (MHLW) reported an imported case of laboratory-confirmed 2019-novel coronavirus (2019-nCoV) from Wuhan, Hubei Province, China. The case-patient is male, between the age of 30-39 years, living in Japan. The case-patient travelled to Wuhan, China in late December and developed fever on 3 January 2020 while staying in Wuhan. He did not visit the Huanan Seafood Wholesale Market or any other live animal markets in Wuhan. He has indicated that he was in close contact with a person with pneumonia. On 6 January, he traveled back to Japan and tested negative for influenza when he visited a local clinic on the same day.'
                    reports:
                      - event_date: '2020-01-03 00:00:00 to 2020-01-15'
                        locations:
                          - country: China
                            location: 'Wuhan, Hubei Province'
                          - country: Japan
                            location: ''
                        diseases:
                          - 2019-nCoV
                        syndromes:
                          - Fever of unknown Origin
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: 400 'key terms' are required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: 401 Please provide a valid api key
        '404':
          description: Not Found
          headers: {}
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: 404 ‘/foo/bar’ does not exist
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: Internal server error
        '501':
          description: Not Implemented
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: 501 ‘/foo/bar’ is still in development
        '502':
          description: Bad Gateway
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: 502 Server returned invalid response
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: Server returned invalid response
        '504':
          description: Gateway Timeout
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMessage:
                    type: string
              examples:
                example-1:
                  value:
                    errorMessage: Server did not respond in time
      description: 'Endpoint for getting reports from, period of interest, key disease terms and location.'
      parameters:
        - schema:
            type: array
          in: query
          description: Period of interest
          name: poi
          required: true
        - schema:
            type: array
          in: query
          name: key_terms
          description: Disease search
          required: true
        - schema:
            type: string
          in: query
          description: ':ocation of interest '
          name: location
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value: {}
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      x-examples:
        Alice Smith:
          id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
  securitySchemes: {}
